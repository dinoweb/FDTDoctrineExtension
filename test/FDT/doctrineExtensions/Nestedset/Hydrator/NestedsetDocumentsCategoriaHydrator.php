<?php

namespace dinoWeb\Nestedset\Hydrator;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class NestedsetDocumentsCategoriaHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data)
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = (string) $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['ancestors']) ? $data['ancestors'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork, '$');
        $return->setOwner($document, $this->class->fieldMappings['ancestors']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['ancestors']->setValue($document, $return);
        $hydratedData['ancestors'] = $return;

        /** @ReferenceOne */
        if (isset($data['parent'])) {
            $reference = $data['parent'];
            $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['parent'], $reference);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($reference['$id']);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['parent']->setValue($document, $return);
            $hydratedData['parent'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['level'])) {
            $value = $data['level'];
            $return = (int) $value;
            $this->class->reflFields['level']->setValue($document, $return);
            $hydratedData['level'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name'])) {
            $value = $data['name'];
            $return = (string) $value;
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['ebayId'])) {
            $value = $data['ebayId'];
            $return = (int) $value;
            $this->class->reflFields['ebayId']->setValue($document, $return);
            $hydratedData['ebayId'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['ebayOfferedEnable'])) {
            $value = $data['ebayOfferedEnable'];
            $return = (bool) $value;
            $this->class->reflFields['ebayOfferedEnable']->setValue($document, $return);
            $hydratedData['ebayOfferedEnable'] = $return;
        }
        return $hydratedData;
    }
}